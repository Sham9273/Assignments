Snippet 1:  
public class Main { 
    public void main(String[] args) { 
        System.out.println("Hello, World!"); 
    } 
} 
What error do you get when running this code? 
Ans :- Error: Main method is not static in class Main, please define the main method as:
   public static void main(String[] args)
   *In the above snippet,the Main method is missing "static" word.
   When the java program starts, there is no object of class present.
   The main method has to be "static" so that the JVM can load class into memory and call the main method without first instance of class creating.

Snippet 2:  
public class Main { 
    static void main(String[] args) { 
        System.out.println("Hello, World!"); 
    } 
} 
What happens when you compile and run this code? 
Ans :-
		Error: Main method not found in class Main, please define the main method as:
   public static void main(String[] args)
   *In this snippet the word "public" is missing from the main method.
   For the access of method JRE needs to be main method as public.
   So it can be access main method without restrictions.
   
Snippet 3:  
public class Main { 
    public static int main(String[] args) { 
        System.out.println("Hello, World!"); 
        return 0; 
    } 
} 
What error do you encounter? Why is void used in the main method? 
Ans :-
	Error: Main method must return a value of type void in class Main.
	*In the above snippet, the main method have "int" instead of "void".
	In the java every method must provide return type.so the java main method retrun type "void" because it doesn't return anything.

Snippet 4:  
public class Main { 
    public static void main() { 
        System.out.println("Hello, World!"); 
    } 
} 
 What happens when you compile and run this code? Why is String[] args needed?
Ans :-
	Error: Main method not found in class Main
	*In the above snippet, single line type of array "String[] args" is missing.
	Each string is a command line argument.
	So commanad line arguments to pass the information to the program at the runtime.

Snippet 5:  
public class Main { 
    public static void main(String[] args) { 
        System.out.println("Main method with String[] args"); 
    } 
    public static void main(int[] args) { 
        System.out.println("Overloaded main method with int[] args"); 
    } 
} 
 Can you have multiple main methods? What do you observe?
Ans :-Don't have multiple main methods in Java.
	*In the above snippet have two main methods.But the first one is correct, another one have "int" instead of "String" is also wrong way to write main method.
	And it throw an error while compling the above program.

Snippet 6:  
public class Main { 
    public static void main(String[] args) { 
        int x = y + 10; 
        System.out.println(x); 
    } 
} 
 What error occurs? Why must variables be declared?
Ans :-
	error: cannot find y symbol
	The main purpose of variable declaration is to store the required data in the memory location 
	in the form of variables so that we can use them in our program to perform any task.

Snippet 7:  
public class Main { 
    public static void main(String[] args) { 
        int x = "Hello"; 
        System.out.println(x); 
    } 
} 
 What compilation error do you see? Why does Java enforce type safety?
Ans :-
	error: incompatible types: String cannot be converted to int
	Java does have enforce type safety because it prevents the programs from accessing memory in the inappropriate way by controlling memory of each object.
	
Snippet 8:  
public class Main { 
    public static void main(String[] args) { 
        System.out.println("Hello, World!" 
    } 
} 
 What syntax errors are present? How do they affect compilation? 
Ans :-
	error: ')' expected
        System.out.println("Hello, World!"
                                          ^
	*In the above snippet close parentheses and semicolon are missing in the commanad line.

Snippet 9:  
public class Main { 
    public static void main(String[] args) { 
        int class = 10; 
        System.out.println(class); 
    } 
} 
 What error occurs? Why can't reserved keywords be used as identifiers? 
Ans :-
	 error: <identifier> expected
	 Reserved keywords are predefined meaning in the language's syntax and using them as a identifiers would lead to confusion and syntax error.

Snippet 10:
----------  
public class Main { 
    public void display() { 
        System.out.println("No parameters"); 
    } 
    public void display(int num) { 
        System.out.println("With parameter: " + num); 
    } 
    public static void main(String[] args) { 
        display(); 
        display(5); 
    } 
} 
 What happens when you compile and run this code? Is method overloading allowed? 
Ans :-
	error: non-static method display(int) cannot be referenced from a static context

Snippet 11:  
public class Main { 
    public static void main(String[] args) { 
        int[] arr = {1, 2, 3}; 
        System.out.println(arr[5]); 
    } 
} 
 What runtime exception do you encounter? Why does it occur?
Ans :-
	Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 3
	* In the above snippet array have given three index and in the output asking 5th index. 
	
Snippet 12:  
public class Main { 
    public static void main(String[] args) { 
        while (true) { 
            System.out.println("Infinite Loop"); 
        } 
    } 
} 
 What happens when you run this code? How can you avoid infinite loops? 
Ans :-*When we run this code, its running for infinite time. 
	To avoid this infinite loops we need to add "break;" statement after the output commanad line.
	
Snippet 13: 
---------- 
public class Main { 
    public static void main(String[] args) { 
        String str = null; 
        System.out.println(str.length()); 
    } 
} 
 What exception is thrown? Why does it occur?
Ans :-
	Exception in thread "main" java.lang.NullPointerException: Cannot invoke "String.length()" because "<local1>" is null

Snippet 14:  
public class Main { 
    public static void main(String[] args) { 
        double num = "Hello"; 
        System.out.println(num); 
    } 
} 
 What compilation error occurs? Why does Java enforce data type constraints? 
Ans :-
	 error: incompatible types: String cannot be converted to double
	 *In the Java constraints are restrictions that we impose on our code to ensure it behaves as expected.

Snippet 15:  
public class Main { 
    public static void main(String[] args) { 
        int num1 = 10; 
        double num2 = 5.5; 
        int result = num1 + num2; 
        System.out.println(result); 
    } 
} 
 What error occurs when compiling this code? How should you handle different data types 
in operations?
Ans :-
	error: incompatible types: possible lossy conversion from double to int
	*If we want to run this code. So we want to apply type conversion in this program like "double num2=5.5;" into "int num2=(int)5.5;".

Snippet 16:  
public class Main { 
    public static void main(String[] args) { 
        int num = 10; 
        double result = num / 4; 
        System.out.println(result); 
    } 
} 
 What is the result of this operation? Is the output what you expected?
Ans :-
	The program is run successfull and the output is "2.0".

Snippet 17:  
public class Main { 
    public static void main(String[] args) { 
        int a = 10; 
        int b = 5; 
        int result = a ** b; 
        System.out.println(result); 
    } 
} 
 What compilation error occurs? Why is the ** operator not valid in Java?
Ans :-
	 error: illegal start of expression.
	 *The "**" operator not valid in java because "*" use as a arithmetic operator.

Snippet 18:  
public class Main { 
    public static void main(String[] args) { 
        int a = 10; 
        int b = 5; 
        int result = a + b * 2; 
        System.out.println(result); 
    } 
} 
 What is the output of this code? How does operator precedence affect the result? 
Ans :-
	The output of this code is "20".
	*Arithmectic operator precedence affect the result.

Snippet 19:  
public class Main { 
    public static void main(String[] args) { 
        int a = 10; 
        int b = 0; 
        int result = a / b; 
        System.out.println(result); 
    } 
} 
 What runtime exception is thrown? Why does division by zero cause an issue in Java?
Ans :-
	Exception in thread "main" java.lang.ArithmeticException: / by zero
	* Values like INFINITY and NaN are available for floating-point numbers but not for integers.
	As a result dividing an integer by zero will result in an exception.
	
Snippet 20:  
public class Main { 
    public static void main(String[] args) { 
        System.out.println("Hello, World") 
    } 
} 
 What syntax error occurs? How does the missing semicolon affect compilation? 
Ans :-
	 error: ';' expected
	 *In the above program,the outout command method line should be end with semicolon";".
	 Because in the java without semicolon method declaration is not considered as a statement.

Snippet 21:  
public class Main { 
    public static void main(String[] args) { 
        System.out.println("Hello, World!"); 
    // Missing closing brace here 
} 
 What does the compiler say about mismatched braces?
Ans :-
	error: reached end of file while parsing }
	
Snippet 22:  
public class Main { 
    public static void main(String[] args) { 
        static void displayMessage() { 
            System.out.println("Message"); 
        } 
    } 
} 
 What syntax error occurs? Can a method be declared inside another method?
Ans :-
	error: illegal start of expression
        static void displayMessage() {
	*No, a method can;t be declared inside another method because java does not support directly nested methods.

Snippet 23:  
public class Confusion { 
    public static void main(String[] args) { 
        int value = 2; 
        switch(value) { 
            case 1: 
                System.out.println("Value is 1"); 
            case 2: 
                System.out.println("Value is 2"); 
            case 3: 
                System.out.println("Value is 3"); 
            default: 
                System.out.println("Default case"); 
        } 
    } 
} 
 Error to Investigate: Why does the default case print after "Value is 2"? How can you prevent 
the program from executing the default case?
Ans :-
	The default case prints after "Value is 2" because initially value declare as "2".
	We can prevent the program from executing the default case by using "break" statement after the case statement.

Snippet 24:  
public class MissingBreakCase { 
    public static void main(String[] args) { 
        int level = 1; 
        switch(level) { 
            case 1: 
                System.out.println("Level 1"); 
            case 2: 
                System.out.println("Level 2"); 
            case 3: 
                System.out.println("Level 3"); 
            default: 
                System.out.println("Unknown level"); 
        } 
    } 
} 
 Error to Investigate: When level is 1, why does it print "Level 1", "Level 2", "Level 3", and 
"Unknown level"? What is the role of the break statement in this situation?
Ans :-
	In this program, when switch case first statement is true but without break statement it goes next case and it will run without throwing error.
	This will also happens with the default statement and after default statement run, the program will be end.
	The break statement in Java terminates the loop immediately, and the control of the program moves to the next statement following the loop.

Snippet 25:  
public class Switch { 
    public static void main(String[] args) { 
        double score = 85.0; 
        switch(score) { 
            case 100: 
                System.out.println("Perfect score!"); 
                break; 
            case 85: 
                System.out.println("Great job!"); 
                break; 
            default: 
                System.out.println("Keep trying!"); 
        } 
    } 
} 
 Error to Investigate: Why does this code not compile? What does the error tell you about the 
types allowed in switch expressions? How can you modify the code to make it work? 
Ans :-
	error: patterns in switch statements are a preview feature and are disabled by default.
		selector type double is not allowed.
	If we want to run this code. We can do the type conversion. "int score=(int)85.0;".
	
Snippet 26:  
public class Switch { 
    public static void main(String[] args) { 
        int number = 5; 
        switch(number) { 
            case 5: 
                System.out.println("Number is 5"); 
 
 
                break; 
            case 5: 
                System.out.println("This is another case 5"); 
                break; 
            default: 
                System.out.println("This is the default case"); 
        } 
    } 
} 
 Error to Investigate: Why does the compiler complain about duplicate case labels? What 
happens when you have two identical case labels in the same switch block?
Ans :-
	error: duplicate case label
	*Two case constants in the same switch statement cannot have identical values.
	Each case constant must be unique within the switch statement.
	If two case constants have the same value, it would result in a compiler error.
	



	
	


	 
	

	
	
	
	