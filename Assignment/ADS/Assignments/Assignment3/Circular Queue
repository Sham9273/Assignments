public class CircularQueue{
    int size=5;
    int[]Q=new int[size];
    int front,rear;
    
    CircularQueue(){
        front=-1;
        rear=-1;
    }
    boolean isEmpty(){
        return (front==-1);
    }
    boolean isFull(){
        return ((rear+1)%size==front);
    }
    void enqueue(int x){
        if(isFull()){
            System.out.println("Queue is full");
        }
        else{
            if(front==-1)
            front=0;
        }
        rear=(rear+1)%size;
        Q[rear]=x;
        System.out.println(x+" Inserted");
    }
    int dequeue(){
        if(isEmpty()){
            System.out.println("Queue is Empty");
            return -1;
        }
        else{
            int x=Q[front];
            System.out.println(x+" Deleted");
            if(front==rear){
                front=-1;
                rear=-1;
            }
            else{
                front=(front+1)%size;
            }
            return x;
        }
    }
    void display(){
        if(isEmpty()){
            System.out.println("Empty Queue");
        }
        else{
            System.out.println("Element of Queue");
            int i=front;
            while(true){
                System.out.println(Q[i]);
                if(i==rear)
                    break;
                i=(i+1)%size;
                }
                System.out.println();
            }
        }
    public static void main(String args[]){
        CircularQueue cq=new CircularQueue();
        cq.enqueue(4);
        cq.enqueue(5);
        cq.enqueue(6);
        cq.enqueue(7);
        cq.display();
        
        cq.dequeue();
        cq.display();
    
    }
}
